/*
Display as an equal height inline item, suitable for list items, etc
see: http://foohack.com/2007/11/cross-browser-support-for-inline-block-styling/
see: http://www.boogdesign.com/examples/floats.html

Compatibility untested.
*/
@mixin inline-stack {
  vertical-align: top;
  display: -moz-inline-stack;
  display: inline-block;
  zoom: 1;
  *display: inline;
}

/*
A helper mixin for applying high-resolution background images

$path - path to the retina image.
$w    - width of the retina image, defaults to auto.
$h    - height of the retina image, defaults to auto.

Compatibility untested.
*/
@mixin at2x($image_name, $w: auto, $h: auto, $extension: '.png') {
  background-image: image-url($image_name + $extension);
  $x2img: $image_name + '@2x' + $extension;

  @media all and (-webkit-min-device-pixel-ratio : 1.5) {
    background-image: image-url($x2img);
    background-size: $w $h;
  }
}

/*
Expand an image to the maximum dimensions of its container element

Compatibility untested
*/
@mixin adaptive-image {
  display:block;
  width:100%;
  max-width:100%;
  height:auto;
}

/*
WebKit font-smoothing

References:

1. http://maxvoltar.com/sandbox/fontsmoothing/
2. http://maxvoltar.com/archive/-webkit-font-smoothing

source: https://gist.github.com/adamstac/5048881

Values: none, antialiased (default), subpixel-antialiased

Currently only compatibile in webkit browsers
*/
@mixin font-smoothing($value: antialiased) {
  -webkit-font-smoothing: $value;
}

/*
Use a retina icon sprite.

Compatibility untested.
*/
@mixin retina-sprite($map, $map-retina, $sprite) {
  background-image: sprite-url($map);
  background-position: sprite-position($map, $sprite);
  background-repeat: no-repeat;
  overflow: hidden;
  display: block;
  height: image-height(sprite-file($map, $sprite));
  width: image-width(sprite-file($map, $sprite));

  @media only screen and (-webkit-min-device-pixel-ratio : 1.5), only screen and (min-device-pixel-ratio : 1.5) {
    background-image: sprite-url($map-retina);
    background-size: (image-width(sprite-path($map-retina)) / 2) (image-height(sprite-path($map-retina)) / 2);
    background-position: round(nth(sprite-position($map-retina, $sprite), 1) / 2) round(nth(sprite-position($map-retina, $sprite), 2) / 2);
    height: image-height(sprite-file($map-retina, $sprite)) / 2;
    width: image-width(sprite-file($map-retina, $sprite)) / 2;
  }
}

/*
Apply block formatting context.

See: http://www.w3.org/TR/CSS2/visuren.html#block-formatting
*/
@mixin block-formatting-context {
  overflow:hidden;
  *overflow:visible;
  zoom:1;
}
